
#include<bits/stdc++.h>
using namespace std;

int fib(int n,int *arr)
{
    if(n == 0 ||n == 1)
        return 1;
    if(arr[n] > 0)
    {
        return arr[n];
    }
    //cout<<n<<" ";
    int output = fib(n - 1,arr) + fib(n - 2,arr);
    arr[n] = output;
    //cout<<output<<"  ";
    return output;
}
int fib1(int n)
{
	int f[n + 2];
	int i;
	f[0] = 0;
	f[1] = 1;
	for(i = 2; i <= n; i++)
	{
	f[i] = f[i - 1] + f[i - 2];
	}
	return f[n];
	}
int main()
{
    int n;
    cin >> n;
    int *arr = new int[n+1];
    for(int i = 0; i <= n; i++)
    {
        arr[i] = 0;
    }
    cout << fib(n,arr) << endl;
    cout << fib1(n) << endl;
    delete []arr;
    return 0;
}
Another Method
#include<bits/stdc++.h>
using namespace std;

int fib(int n,int *arr)
{
    if(n == 0 ||n == 1)
        return 1;
    if(arr[n ] > 0)
    {
        return arr[n];
    }
    int output = fib(n - 1,arr) + fib(n - 2,arr);
    arr[n] = output;
    return output;
}
int main()
{
    int n;
    cin >> n;
    int *arr = new int[n+1];
    for(int i = 0; i <= n; i++)
    {
        arr[i] = 0;
    }
    cout << fib(n,arr) << endl;
    return 0;
}

// Time complexity reduced from O(2^n) to O(n)

